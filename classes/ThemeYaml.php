<?php

namespace Filipac\Comingsoon\Classes;

use Illuminate\Support\Arr;
use Illuminate\Support\Collection;
use October\Rain\Halcyon\Datasource\Resolver;
use October\Rain\Halcyon\Model;
use October\Rain\Support\Str;

class ThemeYaml extends Model
{
    public $dirName = '';

    /**
     * @var array Allowable file extensions.
     */
    protected $allowedExtensions = ['yaml'];

    /**
     * @var string Default file extension.
     */
    protected $defaultExtension = 'yaml';

    protected static $resolver;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        $resolver = new Resolver(['theme' => Content::getYamlDS()]);
        $resolver->setDefaultDatasource('theme');

        static::setDatasourceResolver($resolver);

        static::extend(function (self $model) {
            $model->bindEvent('model.beforeGetAttribute', function ($key) use($model) {
//                if (!$model->attributes['data'] || is_array($model->attributes['data'])) {
//                    $model->attributes['data'] = [];
//                }
                if (is_array($model->attributes['data'])) {
                    $data = $model->attributes['data'];
                    $val = Arr::get($data, $key);

                    if ($model->hasGetMutator($key)) {
                        $val = $model->{'get'.Str::studly($key).'Attribute'}($val);
                    }

                    return $val;
                }
            });

            $model->bindEvent('model.setAttribute', function ($key, $val) use($model) {
                if (is_array($model->attributes['data'])) {
                    $data = $model->attributes['data'];
                    if($val instanceof Collection) {
                        $val = $val->toArray();
                    }
                    Arr::set($data, $key, $val);

                    $model->attributes['data'] = $data;
                }
            });
        });
    }
}
